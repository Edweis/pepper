{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Automerge from 'automerge';\nimport { Buffer } from 'buffer';\nexport const encodeBin = binary => // const decoder = new TextDecoder('utf8');\n// const b64encoded = Buffer.from(decoder.decode(u8));\nBuffer.from(binary).toString('base64');\nexport const decodeBin = b64Str => {\n  const e = Buffer.from(b64Str, 'base64');\n  return new Uint8Array(e);\n};\nconst STORAGE_KEY = 'hello';\nexport function useAutomerge(initValue) {\n  _s();\n\n  const [doc, setDoc] = React.useState(() => {\n    const initData = window.localStorage.getItem(STORAGE_KEY);\n    const initBinary = initData != null && decodeBin(initData);\n    if (initBinary) return Automerge.load(initBinary);\n    return Automerge.from(initValue);\n  });\n  useEffect(() => {\n    console.log('I changed');\n    window.localStorage.setItem(STORAGE_KEY, encodeBin(Automerge.save(doc)));\n  }, [doc]);\n  return [doc, React.useCallback((message, updater) => {\n    console.time('record');\n    console.log('Hey'); // optional message\n\n    setDoc(Automerge.change(doc, message, updater));\n    console.timeLog('record');\n    console.timeEnd('record');\n  }, [doc])];\n}\n\n_s(useAutomerge, \"X8ap5GQ6RvmS4HnqnSvyWXIs3TA=\");","map":{"version":3,"sources":["/home/eydwales/Documents/edweis/pepper/src/lib/useAutomerge.ts"],"names":["React","useEffect","Automerge","Buffer","encodeBin","binary","from","toString","decodeBin","b64Str","e","Uint8Array","STORAGE_KEY","useAutomerge","initValue","doc","setDoc","useState","initData","window","localStorage","getItem","initBinary","load","console","log","setItem","save","useCallback","message","updater","time","change","timeLog","timeEnd"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAA0C,WAA1C;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAO,MAAMC,SAAS,GAAIC,MAAD,IACvB;AACA;AACAF,MAAM,CAACG,IAAP,CAAYD,MAAZ,EAAoBE,QAApB,CAA6B,QAA7B,CAHK;AAKP,OAAO,MAAMC,SAAS,GAAIC,MAAD,IAAgC;AACvD,QAAMC,CAAC,GAAGP,MAAM,CAACG,IAAP,CAAYG,MAAZ,EAAoB,QAApB,CAAV;AACA,SAAO,IAAIE,UAAJ,CAAeD,CAAf,CAAP;AACD,CAHM;AASP,MAAME,WAAW,GAAG,OAApB;AACA,OAAO,SAASC,YAAT,CACLC,SADK,EAGiD;AAAA;;AACtD,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBhB,KAAK,CAACiB,QAAN,CAAe,MAAM;AACzC,UAAMC,QAAQ,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,WAA5B,CAAjB;AACA,UAAMU,UAAU,GAAGJ,QAAQ,IAAI,IAAZ,IAAoBV,SAAS,CAACU,QAAD,CAAhD;AACA,QAAII,UAAJ,EAAgB,OAAOpB,SAAS,CAACqB,IAAV,CAAkBD,UAAlB,CAAP;AAChB,WAAOpB,SAAS,CAACI,IAAV,CAAkBQ,SAAlB,CAAP;AACD,GALqB,CAAtB;AAOAb,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAN,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4Bd,WAA5B,EAAyCR,SAAS,CAACF,SAAS,CAACyB,IAAV,CAAeZ,GAAf,CAAD,CAAlD;AACD,GAHQ,EAGN,CAACA,GAAD,CAHM,CAAT;AAIA,SAAO,CACLA,GADK,EAELf,KAAK,CAAC4B,WAAN,CACG,CAACC,OAAD,EAAeC,OAAf,KAAgC;AAC/BN,IAAAA,OAAO,CAACO,IAAR,CAAa,QAAb;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAF+B,CAG/B;;AACAT,IAAAA,MAAM,CAACd,SAAS,CAAC8B,MAAV,CAAiBjB,GAAjB,EAAsBc,OAAtB,EAA+BC,OAA/B,CAAD,CAAN;AACAN,IAAAA,OAAO,CAACS,OAAR,CAAgB,QAAhB;AAEAT,IAAAA,OAAO,CAACU,OAAR,CAAgB,QAAhB;AACD,GATH,EAUE,CAACnB,GAAD,CAVF,CAFK,CAAP;AAeD;;GA9BeF,Y","sourcesContent":["import React, { useEffect } from 'react';\nimport Automerge, { BinaryDocument } from 'automerge';\nimport {Buffer} from 'buffer';\nexport const encodeBin = (binary: Uint8Array): string =>\n  // const decoder = new TextDecoder('utf8');\n  // const b64encoded = Buffer.from(decoder.decode(u8));\n  Buffer.from(binary).toString('base64');\n\nexport const decodeBin = (b64Str: string): Uint8Array => {\n  const e = Buffer.from(b64Str, 'base64');\n  return new Uint8Array(e);\n};\ntype AutomergeSetStateAction<D, T = Automerge.Proxy<D>> = {\n  (message: string, callback: Automerge.ChangeFn<T>): void;\n  (callback: Automerge.ChangeFn<T>): void;\n};\n\nconst STORAGE_KEY = 'hello';\nexport function useAutomerge<T = unknown>(\n  initValue: T,\n): // initialDoc: T | (() => T),\n[Automerge.FreezeObject<T>, AutomergeSetStateAction<T>] {\n  const [doc, setDoc] = React.useState(() => {\n    const initData = window.localStorage.getItem(STORAGE_KEY);\n    const initBinary = initData != null && decodeBin(initData);\n    if (initBinary) return Automerge.load<T>(initBinary as BinaryDocument);\n    return Automerge.from<T>(initValue);\n  });\n\n  useEffect(() => {\n    console.log('I changed');\n    window.localStorage.setItem(STORAGE_KEY, encodeBin(Automerge.save(doc)));\n  }, [doc]);\n  return [\n    doc,\n    React.useCallback(\n      ((message: any, updater: any) => {\n        console.time('record');\n        console.log('Hey');\n        // optional message\n        setDoc(Automerge.change(doc, message, updater));\n        console.timeLog('record');\n\n        console.timeEnd('record');\n      }) as AutomergeSetStateAction<T>,\n      [doc],\n    ),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}