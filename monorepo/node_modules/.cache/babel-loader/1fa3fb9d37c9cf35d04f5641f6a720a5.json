{"ast":null,"code":"function isObject(obj) {\n  return typeof obj === 'object' && obj !== null;\n}\n/**\n * Returns a shallow copy of the object `obj`. Faster than `Object.assign({}, obj)`.\n * https://jsperf.com/cloning-large-objects/1\n */\n\n\nfunction copyObject(obj) {\n  if (!isObject(obj)) return {};\n  let copy = {};\n\n  for (let key of Object.keys(obj)) {\n    copy[key] = obj[key];\n  }\n\n  return copy;\n}\n/**\n * Takes a string in the form that is used to identify operations (a counter concatenated\n * with an actor ID, separated by an `@` sign) and returns an object `{counter, actorId}`.\n */\n\n\nfunction parseOpId(opId) {\n  const match = /^(\\d+)@(.*)$/.exec(opId || '');\n\n  if (!match) {\n    throw new RangeError(`Not a valid opId: ${opId}`);\n  }\n\n  return {\n    counter: parseInt(match[1], 10),\n    actorId: match[2]\n  };\n}\n/**\n * Returns true if the two byte arrays contain the same data, false if not.\n */\n\n\nfunction equalBytes(array1, array2) {\n  if (!(array1 instanceof Uint8Array) || !(array2 instanceof Uint8Array)) {\n    throw new TypeError('equalBytes can only compare Uint8Arrays');\n  }\n\n  if (array1.byteLength !== array2.byteLength) return false;\n\n  for (let i = 0; i < array1.byteLength; i++) {\n    if (array1[i] !== array2[i]) return false;\n  }\n\n  return true;\n}\n/**\n * Creates an array containing the value `null` repeated `length` times.\n */\n\n\nfunction createArrayOfNulls(length) {\n  const array = new Array(length);\n\n  for (let i = 0; i < length; i++) array[i] = null;\n\n  return array;\n}\n\nmodule.exports = {\n  isObject,\n  copyObject,\n  parseOpId,\n  equalBytes,\n  createArrayOfNulls\n};","map":{"version":3,"sources":["/home/eydwales/Documents/edweis/pepper/node_modules/automerge/src/common.js"],"names":["isObject","obj","copyObject","copy","key","Object","keys","parseOpId","opId","match","exec","RangeError","counter","parseInt","actorId","equalBytes","array1","array2","Uint8Array","TypeError","byteLength","i","createArrayOfNulls","length","array","Array","module","exports"],"mappings":"AAAA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAA1C;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBD,GAApB,EAAyB;AACvB,MAAI,CAACD,QAAQ,CAACC,GAAD,CAAb,EAAoB,OAAO,EAAP;AACpB,MAAIE,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYL,GAAZ,CAAhB,EAAkC;AAChCE,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYH,GAAG,CAACG,GAAD,CAAf;AACD;;AACD,SAAOD,IAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASI,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,KAAK,GAAG,eAAeC,IAAf,CAAoBF,IAAI,IAAI,EAA5B,CAAd;;AACA,MAAI,CAACC,KAAL,EAAY;AACV,UAAM,IAAIE,UAAJ,CAAgB,qBAAoBH,IAAK,EAAzC,CAAN;AACD;;AACD,SAAO;AAACI,IAAAA,OAAO,EAAEC,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAlB;AAAkCK,IAAAA,OAAO,EAAEL,KAAK,CAAC,CAAD;AAAhD,GAAP;AACD;AAED;AACA;AACA;;;AACA,SAASM,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,MAAI,EAAED,MAAM,YAAYE,UAApB,KAAmC,EAAED,MAAM,YAAYC,UAApB,CAAvC,EAAwE;AACtE,UAAM,IAAIC,SAAJ,CAAc,yCAAd,CAAN;AACD;;AACD,MAAIH,MAAM,CAACI,UAAP,KAAsBH,MAAM,CAACG,UAAjC,EAA6C,OAAO,KAAP;;AAC7C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACI,UAA3B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,QAAIL,MAAM,CAACK,CAAD,CAAN,KAAcJ,MAAM,CAACI,CAAD,CAAxB,EAA6B,OAAO,KAAP;AAC9B;;AACD,SAAO,IAAP;AACD;AAED;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,MAAV,CAAd;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,MAApB,EAA4BF,CAAC,EAA7B,EAAiCG,KAAK,CAACH,CAAD,CAAL,GAAW,IAAX;;AACjC,SAAOG,KAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA,QADe;AACLE,EAAAA,UADK;AACOK,EAAAA,SADP;AACkBQ,EAAAA,UADlB;AAC8BO,EAAAA;AAD9B,CAAjB","sourcesContent":["function isObject(obj) {\n  return typeof obj === 'object' && obj !== null\n}\n\n/**\n * Returns a shallow copy of the object `obj`. Faster than `Object.assign({}, obj)`.\n * https://jsperf.com/cloning-large-objects/1\n */\nfunction copyObject(obj) {\n  if (!isObject(obj)) return {}\n  let copy = {}\n  for (let key of Object.keys(obj)) {\n    copy[key] = obj[key]\n  }\n  return copy\n}\n\n/**\n * Takes a string in the form that is used to identify operations (a counter concatenated\n * with an actor ID, separated by an `@` sign) and returns an object `{counter, actorId}`.\n */\nfunction parseOpId(opId) {\n  const match = /^(\\d+)@(.*)$/.exec(opId || '')\n  if (!match) {\n    throw new RangeError(`Not a valid opId: ${opId}`)\n  }\n  return {counter: parseInt(match[1], 10), actorId: match[2]}\n}\n\n/**\n * Returns true if the two byte arrays contain the same data, false if not.\n */\nfunction equalBytes(array1, array2) {\n  if (!(array1 instanceof Uint8Array) || !(array2 instanceof Uint8Array)) {\n    throw new TypeError('equalBytes can only compare Uint8Arrays')\n  }\n  if (array1.byteLength !== array2.byteLength) return false\n  for (let i = 0; i < array1.byteLength; i++) {\n    if (array1[i] !== array2[i]) return false\n  }\n  return true\n}\n\n/**\n * Creates an array containing the value `null` repeated `length` times.\n */\nfunction createArrayOfNulls(length) {\n  const array = new Array(length)\n  for (let i = 0; i < length; i++) array[i] = null\n  return array\n}\n\nmodule.exports = {\n  isObject, copyObject, parseOpId, equalBytes, createArrayOfNulls\n}\n"]},"metadata":{},"sourceType":"script"}