{"ast":null,"code":"/**\n * The most basic CRDT: an integer value that can be changed only by\n * incrementing and decrementing. Since addition of integers is commutative,\n * the value trivially converges.\n */\nclass Counter {\n  constructor(value) {\n    this.value = value || 0;\n    Object.freeze(this);\n  }\n  /**\n   * A peculiar JavaScript language feature from its early days: if the object\n   * `x` has a `valueOf()` method that returns a number, you can use numerical\n   * operators on the object `x` directly, such as `x + 1` or `x < 4`.\n   * This method is also called when coercing a value to a string by\n   * concatenating it with another string, as in `x + ''`.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n   */\n\n\n  valueOf() {\n    return this.value;\n  }\n  /**\n   * Returns the counter value as a decimal string. If `x` is a counter object,\n   * this method is called e.g. when you do `['value: ', x].join('')` or when\n   * you use string interpolation: `value: ${x}`.\n   */\n\n\n  toString() {\n    return this.valueOf().toString();\n  }\n  /**\n   * Returns the counter value, so that a JSON serialization of an Automerge\n   * document represents the counter simply as an integer.\n   */\n\n\n  toJSON() {\n    return this.value;\n  }\n\n}\n/**\n * An instance of this class is used when a counter is accessed within a change\n * callback.\n */\n\n\nclass WriteableCounter extends Counter {\n  /**\n   * Increases the value of the counter by `delta`. If `delta` is not given,\n   * increases the value of the counter by 1.\n   */\n  increment(delta) {\n    delta = typeof delta === 'number' ? delta : 1;\n    this.context.increment(this.path, this.key, delta);\n    this.value += delta;\n    return this.value;\n  }\n  /**\n   * Decreases the value of the counter by `delta`. If `delta` is not given,\n   * decreases the value of the counter by 1.\n   */\n\n\n  decrement(delta) {\n    return this.increment(typeof delta === 'number' ? -delta : -1);\n  }\n\n}\n/**\n * Returns an instance of `WriteableCounter` for use in a change callback.\n * `context` is the proxy context that keeps track of the mutations.\n * `objectId` is the ID of the object containing the counter, and `key` is\n * the property name (key in map, or index in list) where the counter is\n * located.\n*/\n\n\nfunction getWriteableCounter(value, context, path, objectId, key) {\n  const instance = Object.create(WriteableCounter.prototype);\n  instance.value = value;\n  instance.context = context;\n  instance.path = path;\n  instance.objectId = objectId;\n  instance.key = key;\n  return instance;\n}\n\nmodule.exports = {\n  Counter,\n  getWriteableCounter\n};","map":{"version":3,"sources":["/home/eydwales/Documents/edweis/pepper/node_modules/automerge/frontend/counter.js"],"names":["Counter","constructor","value","Object","freeze","valueOf","toString","toJSON","WriteableCounter","increment","delta","context","path","key","decrement","getWriteableCounter","objectId","instance","create","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAK,IAAI,CAAtB;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKH,KAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKD,OAAL,GAAeC,QAAf,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKL,KAAZ;AACD;;AAjCW;AAoCd;AACA;AACA;AACA;;;AACA,MAAMM,gBAAN,SAA+BR,OAA/B,CAAuC;AACrC;AACF;AACA;AACA;AACES,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,IAAAA,KAAK,GAAG,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,CAA5C;AACA,SAAKC,OAAL,CAAaF,SAAb,CAAuB,KAAKG,IAA5B,EAAkC,KAAKC,GAAvC,EAA4CH,KAA5C;AACA,SAAKR,KAAL,IAAcQ,KAAd;AACA,WAAO,KAAKR,KAAZ;AACD;AAED;AACF;AACA;AACA;;;AACEY,EAAAA,SAAS,CAACJ,KAAD,EAAQ;AACf,WAAO,KAAKD,SAAL,CAAe,OAAOC,KAAP,KAAiB,QAAjB,GAA4B,CAACA,KAA7B,GAAqC,CAAC,CAArD,CAAP;AACD;;AAlBoC;AAqBvC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,mBAAT,CAA6Bb,KAA7B,EAAoCS,OAApC,EAA6CC,IAA7C,EAAmDI,QAAnD,EAA6DH,GAA7D,EAAkE;AAChE,QAAMI,QAAQ,GAAGd,MAAM,CAACe,MAAP,CAAcV,gBAAgB,CAACW,SAA/B,CAAjB;AACAF,EAAAA,QAAQ,CAACf,KAAT,GAAiBA,KAAjB;AACAe,EAAAA,QAAQ,CAACN,OAAT,GAAmBA,OAAnB;AACAM,EAAAA,QAAQ,CAACL,IAAT,GAAgBA,IAAhB;AACAK,EAAAA,QAAQ,CAACD,QAAT,GAAoBA,QAApB;AACAC,EAAAA,QAAQ,CAACJ,GAAT,GAAeA,GAAf;AACA,SAAOI,QAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AAAErB,EAAAA,OAAF;AAAWe,EAAAA;AAAX,CAAjB","sourcesContent":["/**\n * The most basic CRDT: an integer value that can be changed only by\n * incrementing and decrementing. Since addition of integers is commutative,\n * the value trivially converges.\n */\nclass Counter {\n  constructor(value) {\n    this.value = value || 0\n    Object.freeze(this)\n  }\n\n  /**\n   * A peculiar JavaScript language feature from its early days: if the object\n   * `x` has a `valueOf()` method that returns a number, you can use numerical\n   * operators on the object `x` directly, such as `x + 1` or `x < 4`.\n   * This method is also called when coercing a value to a string by\n   * concatenating it with another string, as in `x + ''`.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n   */\n  valueOf() {\n    return this.value\n  }\n\n  /**\n   * Returns the counter value as a decimal string. If `x` is a counter object,\n   * this method is called e.g. when you do `['value: ', x].join('')` or when\n   * you use string interpolation: `value: ${x}`.\n   */\n  toString() {\n    return this.valueOf().toString()\n  }\n\n  /**\n   * Returns the counter value, so that a JSON serialization of an Automerge\n   * document represents the counter simply as an integer.\n   */\n  toJSON() {\n    return this.value\n  }\n}\n\n/**\n * An instance of this class is used when a counter is accessed within a change\n * callback.\n */\nclass WriteableCounter extends Counter {\n  /**\n   * Increases the value of the counter by `delta`. If `delta` is not given,\n   * increases the value of the counter by 1.\n   */\n  increment(delta) {\n    delta = typeof delta === 'number' ? delta : 1\n    this.context.increment(this.path, this.key, delta)\n    this.value += delta\n    return this.value\n  }\n\n  /**\n   * Decreases the value of the counter by `delta`. If `delta` is not given,\n   * decreases the value of the counter by 1.\n   */\n  decrement(delta) {\n    return this.increment(typeof delta === 'number' ? -delta : -1)\n  }\n}\n\n/**\n * Returns an instance of `WriteableCounter` for use in a change callback.\n * `context` is the proxy context that keeps track of the mutations.\n * `objectId` is the ID of the object containing the counter, and `key` is\n * the property name (key in map, or index in list) where the counter is\n * located.\n*/\nfunction getWriteableCounter(value, context, path, objectId, key) {\n  const instance = Object.create(WriteableCounter.prototype)\n  instance.value = value\n  instance.context = context\n  instance.path = path\n  instance.objectId = objectId\n  instance.key = key\n  return instance\n}\n\nmodule.exports = { Counter, getWriteableCounter }\n"]},"metadata":{},"sourceType":"script"}