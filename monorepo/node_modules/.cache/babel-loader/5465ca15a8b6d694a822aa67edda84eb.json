{"ast":null,"code":"// Convience classes to allow users to stricly specify the number type they want\nclass Int {\n  constructor(value) {\n    if (!(Number.isInteger(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER)) {\n      throw new RangeError(`Value ${value} cannot be a uint`);\n    }\n\n    this.value = value;\n    Object.freeze(this);\n  }\n\n}\n\nclass Uint {\n  constructor(value) {\n    if (!(Number.isInteger(value) && value <= Number.MAX_SAFE_INTEGER && value >= 0)) {\n      throw new RangeError(`Value ${value} cannot be a uint`);\n    }\n\n    this.value = value;\n    Object.freeze(this);\n  }\n\n}\n\nclass Float64 {\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new RangeError(`Value ${value} cannot be a float64`);\n    }\n\n    this.value = value || 0.0;\n    Object.freeze(this);\n  }\n\n}\n\nmodule.exports = {\n  Int,\n  Uint,\n  Float64\n};","map":{"version":3,"sources":["/home/eydwales/Documents/edweis/pepper/node_modules/automerge/frontend/numbers.js"],"names":["Int","constructor","value","Number","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","RangeError","Object","freeze","Uint","Float64","module","exports"],"mappings":"AAAA;AAEA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,QAAI,EAAEC,MAAM,CAACC,SAAP,CAAiBF,KAAjB,KAA2BA,KAAK,IAAIC,MAAM,CAACE,gBAA3C,IAA+DH,KAAK,IAAIC,MAAM,CAACG,gBAAjF,CAAJ,EAAwG;AACtG,YAAM,IAAIC,UAAJ,CAAgB,SAAQL,KAAM,mBAA9B,CAAN;AACD;;AACD,SAAKA,KAAL,GAAaA,KAAb;AACAM,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAPO;;AAUV,MAAMC,IAAN,CAAW;AACTT,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,QAAI,EAAEC,MAAM,CAACC,SAAP,CAAiBF,KAAjB,KAA2BA,KAAK,IAAIC,MAAM,CAACE,gBAA3C,IAA+DH,KAAK,IAAI,CAA1E,CAAJ,EAAkF;AAChF,YAAM,IAAIK,UAAJ,CAAgB,SAAQL,KAAM,mBAA9B,CAAN;AACD;;AACD,SAAKA,KAAL,GAAaA,KAAb;AACAM,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAPQ;;AAUX,MAAME,OAAN,CAAc;AACZV,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAM,IAAIK,UAAJ,CAAgB,SAAQL,KAAM,sBAA9B,CAAN;AACD;;AACD,SAAKA,KAAL,GAAaA,KAAK,IAAI,GAAtB;AACAM,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAPW;;AAUdG,MAAM,CAACC,OAAP,GAAiB;AAAEb,EAAAA,GAAF;AAAOU,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAjB","sourcesContent":["// Convience classes to allow users to stricly specify the number type they want\n\nclass Int {\n  constructor(value) {\n    if (!(Number.isInteger(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER)) {\n      throw new RangeError(`Value ${value} cannot be a uint`)\n    }\n    this.value = value\n    Object.freeze(this)\n  }\n}\n\nclass Uint {\n  constructor(value) {\n    if (!(Number.isInteger(value) && value <= Number.MAX_SAFE_INTEGER && value >= 0)) {\n      throw new RangeError(`Value ${value} cannot be a uint`)\n    }\n    this.value = value\n    Object.freeze(this)\n  }\n}\n\nclass Float64 {\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new RangeError(`Value ${value} cannot be a float64`)\n    }\n    this.value = value || 0.0\n    Object.freeze(this)\n  }\n}\n\nmodule.exports = { Int, Uint, Float64 }\n"]},"metadata":{},"sourceType":"script"}